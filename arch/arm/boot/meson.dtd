/dts-v1/;
/// ***************************************************************************************\n
//$$ PROJECT="meson6"
//$$ REMOVE 1
void root_func(){
//$$ ADD /{
	compatible = "AMLOGIC,8726_MX";
	model = "AMLOGIC";
	interrupt-parent = <&gic>;
	#address-cells = <1>;
	#size-cells = <1>;

/// ***************************************************************************************
///	-	CPU
//$$ MODULE="CPU"
    cpus {
        #address-cells = <1>;
        #size-cells = <0>;
//$$ DEVICE="cpu0"
        cpu@0 {
        	device_type = "cpu";
        	compatible = "arm,cortex-a9";
        	reg = <0x200>;
        };
//$$ DEVICE="cpu1"
        cpu@1 {
        	device_type = "cpu";
        	compatible = "arm,cortex-a9";
        	reg = <0x1>;
        };
    };

/// ***************************************************************************************
///	-	Cache
//$$ MODULE="Cache"
//$$ DEVICE="cache"
		cache-controller {
          compatible = "arm,meson-pl310-cache";
          reg = <0xc4200000 0x1000>;
          cache-unified;
          cache-level = <2>;
          aux-instruction_prefetch;
          aux-data_prefetch;
          aux-ns_lockdown;
          aux-ns_int_ctrl;
          aux-share_override;
          aux-cache_replace_policy_round_robin;
          prefetch-prefetch_offset = <6>;
    };

/// ***************************************************************************************
///	-	Memory
//$$ MODULE="Memory"
//$$ DEVICE="memory"
//$$ L2 PROP_U32 = "aml_reserved_start"
//$$ L2 PROP_U32 = "aml_reserved_end"
//$$ L2 PROP_U32 = "linux,usable-memory"
	memory{
		device_type = "memory";
		aml_reserved_start = <0x06000000>; /**reserved memory start-for kernel */
		aml_reserved_end = <0x05000000>;/**reserved uImage and dtb memory-for uboot*/
		linux,total-memory = <0x40000000>; /**0x40000000--1G memory 0x80000000--2G memory*/
	};

/// ***************************************************************************************
///	-	GIC
//$$ MODULE="GIC"
//$$ DEVICE="gic"
	gic:interrupt-controller{
        compatible = "arm,cortex-a9-gic";
        reg = <0xc4301000 0x1000
               0xc4300100 0x0100>;
        interrupt-controller;
        #interrupt-cells = <3>;
        #address-cells = <0>;
    };

/// ***************************************************************************************
///	-	ION
//$$ MODULE="ION"
//$$ DEVICE="ion_dev"
//$$ L2 PROP_STR = "status"
    ion_dev{
        compatible = "amlogic,ion_dev";
        dev_name = "ion_dev";
        status = "ok";
        reserve-memory = <0x01400000>;
    };

/// **************************************************************************************
/// -   DISP&MM-FB
//$$ MODULE = "DISP&MM-FB"
//$$ DEVICE = "mesonfb"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reserve-memory"
//$$ L2 PROP_U32 = "vmode"
//$$ L2 PROP_U32 5 = "display_size_default"
	mesonfb{
		compatible = "amlogic,mesonfb";
		dev_name = "mesonfb";
		status = "okay";
		reserve-memory = <0x01800000 0x00100000>;
		vmode = <1>; /**0:VMODE_720P 1:VMODE_LCD  2:VMODE_LVDS_1080P 3:VMODE_1080P*/
		display_size_default = <1024 768 1024 1536 32>;
	};
//$$ DEVICE="deinterlace"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "reserve-memory"
    deinterlace{
		compatible = "amlogic,deinterlace";
		dev_name = "deinterlace";
		status = "ok";
		reserve-memory = <0x02300000>;
	};

/// ***************************************************************************************
///	-	DISP&MM-A/V stream
//$$ MODULE = "DISP&MM-A/V stream"
//$$ DEVICE="mesonstream"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reserve-memory"
	mesonstream{
		compatible = "amlogic,mesonstream";
		dev_name = "mesonstream.0";
		status = "okay";
		reserve-memory = <0x04000000 0x00a00000>;
	};


/// ***************************************************************************************
///	-	DISP&MM-PostProcess
//$$ MODULE="DISP&MM-PostProcess"
//$$ DEVICE="ppmgr"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 ="reserve-memory"
    ppmgr{
		compatible = "amlogic,ppmgr";
		dev_name = "ppmgr";
		status = "okay";
		reserve-memory = <0x03f00000>;		
	};

/// ***************************************************************************************
///	-	DISP&MM-AVC Video Encoder
//$$ MODULE = "DISP&MM-AVC Video Encoder"
//$$ DEVICE="amvenc_avc"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 ="reserve-memory"
    amvenc_avc{
		compatible = "amlogic,amvenc_avc";
		dev_name = "amvenc_avc.0";
		status = "okay";
		reserve-memory = <0x00f00000>;
	};

/// ***************************************************************************************
///	-	DISP&MM-VDIN
//$$ MODULE = "DISP&MM-VDIN"

/// ***************************************************************************************
///	-	DISP&MM-AMLVIDEO2
//$$ MODULE = "DISP&MM-AMLVIDEO2"
//$$ DEVICE="amlvideo2"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reg"
    amlvideo2{
		compatible = "amlogic,amlvideo2";
		dev_name = "amlvideo2.0";
		status = "okay";
		reg = <0x19b00000 0x01800000>;
	};

/// ***************************************************************************************
///	-	DISP&MM-Video Input Manager
//$$ MODULE = "DISP&MM-Video Input Manager"

/// ***************************************************************************************
///	-	DISP&MM-Vout
//$$ MODULE = "DISP&MM-Vout"
//$$ DEVICE = "mesonvout"
//$$ L2 PROP_STR = "status"
	mesonvout{
		compatible = "amlogic,mesonvout";
		dev_name = "mesonvout";
		status = "okay";
	};

/// ***************************************************************************************
///	-	EARLY_INIT
//$$ MODULE="early_init"

/// ***************************************************************************************
///	-	RTC
//$$ MODULE="RTC"
//$$ DEVICE="Rtc"
//$$ L2 PROP_STR = "status"
    rtc{
		compatible = "amlogic,aml_rtc";
		status = "okay";
	};

/// ***************************************************************************************
///	-	UART
//$$ MODULE="UART"
//$$ DEVICE="uart_ao"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L3 PROP_CHOICE "uart_ao_pin_match" = "pinctrl-0"
	uart_ao{
		compatible = "amlogic,aml_uart";
		port_name = "uart_ao";
		status = "okay";
		dev_name = "uart_ao";
		pinctrl-names = "default";
		pinctrl-0 = <&ao_uart_pins>;
	};
	
//$$ DEVICE="uart_0"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L3 PROP_CHOICE "uart_0_pin_match" = "pinctrl-0"
	uart_0{
		compatible = "amlogic,aml_uart";
		port_name = "uart_a";
		status = "okay";
		dev_name = "uart_0";
    	pinctrl-names = "default";
    	pinctrl-0 = <&a_uart_pins>;
	};
	
//$$ DEVICE="uart_1"
//$$ L2 PROP_STR = "status"
	uart_1{
		compatible = "amlogic,aml_uart";
		port_name = "uart_b";
		status = "disabled";
		dev_name = "uart_1";
	};
	
//$$ DEVICE="uart_2"
//$$ L2 PROP_STR = "status"
	uart_2{
		compatible = "amlogic,aml_uart";
		port_name = "uart_c";
		status = "disabled";
		dev_name = "uart_2";
	};
	
//$$ DEVICE="uart_3"
//$$ L2 PROP_STR = "status"	
	uart_3{
		compatible = "amlogic,aml_uart";
		port_name = "uart_d";
		status = "ok";
		dev_name = "uart_3";
	};

/// ***************************************************************************************
///	-	Bluetooth
//$$ MODULE="Bluetooth"
//#ifdef CONFIG_ARCH_MESON8
//$$ DEVICE="bt-dev"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "gpio_reset"
    bt-dev{
        compatible = "amlogic,bt-dev";
        dev_name = "bt-dev";
        status = "ok";
        gpio_reset = "GPIOX_20";
    };
//#endif

/// ***************************************************************************************
///	-	WiFi
//$$ MODULE="WiFi"
//$$ DEVICE="aml_broadcm_wifi"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "interrupt_pin"
//$$ L2 PROP_U32 = "irq_num"
//$$ L2 PROP_STR = "irq_trigger_type"
//$$ L2 PROP_STR = "power_on_pin"
//$$ L2 PROP_STR = "clock_32k_pin"
    wifi{
		compatible = "amlogic,aml_broadcm_wifi";
		dev_name = "aml_broadcm_wifi";
		status = "okay";
		interrupt_pin = "GPIOX_21";
		irq_num = <4>;
		irq_trigger_type = "GPIO_IRQ_HIGH";
		power_on_pin = "GPIOAO_6";
		power_on_pin_level = <0>;
		clock_32k_pin = "GPIOX_10";
	};

//$$ DEVICE="wifi_power"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "power_gpio"
	wifi_power{
        compatible = "amlogic,wifi_power";
        dev_name = "wifi_power";
        status = "okay";
        power_gpio = "GPIOAO_6";
    };  

/// ***************************************************************************************
///	-	Ethernet
//$$ MODULE="Ethernet"
//$$ DEVICE="meson-eth"
//$$ L2 PROP_STR = "status"
    meson-eth{
		compatible = "amlogic,meson-eth";
		dev_name = "meson-eth";
		status = "okay";
		ethbaseaddr = <0xfe0c0000>;
		interruptnum = <40>;
		savepowermode = <0>;
		phy_interface = <0>;
		reset_pin_enable = <0>;
		reset_pin = "GPIOY_15";
		reset_delay = <100>;
	};

/// ***************************************************************************************
///	-	MMC
//$$ MODULE="MMC"
//$$ DEVICE="aml_sdio"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reg"
//$$ L2 PROP_STR 7 = "pinctrl-names"
//$$ L2 PROP_CHOICE "sdio_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_CHOICE "sdio_pin_1_match" = "pinctrl-1"
//$$ L2 PROP_CHOICE "sdio_pin_2_match" = "pinctrl-2"
//$$ L2 PROP_CHOICE "sdio_pin_3_match" = "pinctrl-3"
//$$ L2 PROP_CHOICE "sdio_pin_4_match" = "pinctrl-4"
//$$ L2 PROP_CHOICE "sdio_pin_5_match" = "pinctrl-5"
//$$ L2 PROP_CHOICE "sdio_pin_6_match" = "pinctrl-6"
sdio{
        compatible = "amlogic,aml_sdio";
        dev_name = "aml_sdio.0";
        status = "okay";
        reg = <0xc1108c20 0x20>;
        pinctrl-names = "sd_clk_cmd_pins", "sd_all_pins", "emmc_clk_cmd_pins", "emmc_all_pins", "sdio_clk_cmd_pins", "sdio_all_pins","sd_1bit_pins"; // "jtag_pin", "uartao_default";
        pinctrl-0 = <&sd_clk_cmd_pins>;
        pinctrl-1 = <&sd_all_pins>;
        pinctrl-2 = <&emmc_clk_cmd_pins>;
        pinctrl-3 = <&emmc_all_pins>;
        pinctrl-4 = <&sdio_clk_cmd_pins>;
        pinctrl-5 = <&sdio_all_pins>;
        pinctrl-6 = <&sd_1bit_pins>;

//$$ DEVICE="sd"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 = "port"
//$$ L2 PROP_STR = "pinname"
//$$ L3 PROP_U32 = "ocr_avail"
//$$ L2 PROP_STR 3 = "caps"
//$$ L3 PROP_U32 = "f_min"
//$$ L3 PROP_U32 = "f_max"
//$$ L3 PROP_U32 = "f_max_w"
//$$ L3 PROP_U32 = "max_req_size"
//$$ L2 PROP_STR = "gpio_dat3"
//$$ L2 PROP_STR = "jtag_pin"
//$$ L2 PROP_STR = "gpio_cd"
//$$ L2 PROP_STR = "gpio_ro"
//$$ L2 PROP_U32 = "irq_in"
//$$ L2 PROP_U32 = "irq_out"
//$$ L2 PROP_U32 = "card_type"
        sd{
            status = "okay";
            port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
            pinname = "sd";
            ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED";
            f_min = <300000>;
            f_max = <50000000>;
            f_max_w = <50000000>;
            max_req_size = <0x20000>;          /**128KB*/
            gpio_dat3 = "CARD_4";
            jtag_pin = "CARD_0";
            gpio_cd = "CARD_6";
            gpio_cd_level = <0>;
            gpio_ro = "GPIOZ_0";
            irq_in = <3>;
            irq_out = <5>;
            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
        };

//$$ DEVICE="emmc"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 = "port"
//$$ L2 PROP_STR = "pinname"
//$$ L3 PROP_U32 = "ocr_avail"
//$$ L2 PROP_STR 4 = "caps"
//$$ L3 PROP_U32 = "f_min"
//$$ L3 PROP_U32 = "f_max"
//$$ L3 PROP_U32 = "f_max_w"
//$$ L3 PROP_U32 = "max_req_size"
//$$ L2 PROP_STR = "gpio_dat3"
//$$ L2 PROP_U32 = "card_type"
        emmc{
            status = "ok";
            port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
            pinname = "emmc";
            ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
            f_min = <300000>;
            f_max = <50000000>;
            f_max_w = <50000000>;
            max_req_size = <0x20000>;          /**128KB*/
            gpio_dat3 = "BOOT_3";
            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
        };

//$$ DEVICE="sdio"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 = "port"
//$$ L2 PROP_STR = "pinname"
//$$ L3 PROP_U32 = "ocr_avail"
//$$ L2 PROP_STR 4 = "caps"
//$$ L3 PROP_U32 = "f_min"
//$$ L3 PROP_U32 = "f_max"
//$$ L3 PROP_U32 = "max_req_size"    
//$$ L2 PROP_U32 = "card_type"    
        sdio{
          status = "okay";
          port = <0>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
          pinname = "sdio";
          ocr_avail = <0x200000>;
          caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE";
          f_min = <300000>;
          f_max = <30000000>;
          max_req_size = <0x20000>;          /**128KB*/
          card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
        };
    };

/// ***************************************************************************************
///	-	I2C
//$$ MODULE="I2C"
//$$ DEVICE="I2C_AO"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reg"
//$$ L3 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "I2C_AO_pin_match" = "pinctrl-0"	
	i2c@c8100500{ /*I2C-AO*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-AO";
		status = "ok";
		reg = <0xc8100500 0x1d>;
		#address-cells = <1>;
		#size-cells = <0>;
		device_id = <0>;
		pinctrl-names="default";
		pinctrl-0=<&ao_i2c_master>;
	};

//$$ DEVICE = "I2C_A"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2 ="reg"
//$$ L3 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "I2C_A_pin_match" = "pinctrl-0"
    i2c@c1108500{ /*I2C-A*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-A";
		status = "ok";
		reg = <0xc1108500 0x20>;
		device_id = <1>;
		pinctrl-names="default";
		pinctrl-0=<&a_i2c_master>;
		#address-cells = <1>;
		#size-cells = <0>;
	};
	
//$$ DEVICE="I2C_B"
//$$ L2 PROP_STR = "status"
//$$ L3 PROP_U32 2="reg"
//$$ L3 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "I2C_B_pin_match" = "pinctrl-0"	
	i2c@c11087c0{ /*I2C-B*/
		compatible = "amlogic,aml_i2c";
		dev_name = "i2c-B";
		status = "ok";
		reg = <0xc11087c0 0x20>;
		device_id = <2>;
		pinctrl-names="default";
		pinctrl-0=<&b_i2c_master>;
		#address-cells = <1>;
		#size-cells = <0>;
 	};

/// ***************************************************************************************
///	-	Power
//$$ MODULE="Power"
//$$ DEVICE="dvfs"
//$$ L2 PROP_STR = "status"
    dvfs {
        compatible = "amlogic, amlogic-dvfs";                   /** fixed for driver, don't change       */
        #address-cells = <1>;
        #size-cells = <0>;
        status = "ok";

//$$ L2 PROP_U32 = "dvfs_id"
//$$ L2 PROP_U32 = "table_count"
//$$ L2 PROP_U32 16*3 = "dvfs_table"
        vcck_dvfs {
            dvfs_id     = <1>;                                  /** must be value of (1 << n)            */
            table_count = <17>;                                 /** must be correct count for dvfs_table */
            dvfs_table  = <
            /* NOTE: frequent in this table must be ascending order */
            /* frequent(Khz)    min_uV      max_uV                  */
                  24000         825000      825000
                  96000         825000      825000
                 192000         825000      825000
                 312000         825000      825000
                 408000         825000      825000
                 504000         825000      825000
                 600000         850000      850000
                 720000         850000      850000
                 816000         875000      875000
                 912000         900000      900000
                1008000         925000      925000
                1104000         950000      950000
                1200000         975000      975000
                1320000        1000000     1000000
                1416000        1025000     1025000
                1512000        1050000     1050000
                1608000        1100000     1100000
            >;
        };
    };
//$$ DEVICE="meson_vcck_dvfs_driver"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "default_uV"
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "meson_vcck_dvfs_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_U32 = "use_pwm"
//$$ L2 PROP_U32 = "table_count"
//$$ L2 PROP_U32 16*2 = "cs_voltage_table"
	meson_vcck_dvfs_driver{
        compatible = "amlogic, meson_vcck_dvfs";
        dev_name = "meson_vcck_dvfs_driver";
        status = "ok";
        default_uV = <1280000>;
        pinctrl-names = "default";
        pinctrl-0 = <&aml_pwm_pins>;
        use_pwm = <1>; 
        table_count = <16>;
        cs_voltage_table = <
        /*   
         * Note: This table is hardware depended, If your hardware use PWM method,
         * then first line in this table is PWM register value, second line is
         * voltage of VCCK according this PWM register value. If your platform use
         * constant-current source to adjust vcck voltage, then the first line should 
         * set to 0, means not valid, member 'use_pwm' in this node should set to 0.
         *
         *  ---- This table must be in ascending order by voltage ----
         *    
         *  PWM value       VCCK voltage 
         */   
            0x130009        1010000
            0x12000a        1050000
            0x11000b        1070000
            0x10000c        1090000
            0x0f000d        1110000
            0x0e000e        1130000
            0x0d000f        1150000
            0x0c0010        1170000
            0x0b0011        1190000
            0x0a0012        1210000
            0x090013        1220000
            0x080014        1240000
            0x070015        1270000
            0x060016        1280000
            0x050017        1300000
            0x040018        1320000
        >;   
    };   
//$$ DEVICE="Battery_parameter"
//$$ MATCH "battery_parameter_match" = <&battery_parameter>
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "pmu_twi_id"
//$$ L2 PROP_U32 = "pmu_irq_id"
//$$ L2 PROP_U32 = "pmu_twi_addr"
//$$ L2 PROP_U32 = "pmu_battery_rdc"
//$$ L2 PROP_U32 = "pmu_battery_cap"
//$$ L2 PROP_U32 = "pmu_battery_technology"
//$$ L2 PROP_STR = "pmu_battery_name"
//$$ L2 PROP_U32 = "pmu_init_chgvol"
//$$ L2 PROP_U32 = "pmu_init_chgend_rate"
//$$ L2 PROP_U32 = "pmu_init_chg_enabled"
//$$ L2 PROP_U32 = "pmu_init_adc_freq"
//$$ L2 PROP_U32 = "pmu_init_adc_freqc"
//$$ L2 PROP_U32 = "pmu_init_chg_pretime"
//$$ L2 PROP_U32 = "pmu_init_chg_csttime"
//$$ L2 PROP_U32 = "pmu_init_chgcur"
//$$ L2 PROP_U32 = "pmu_suspend_chgcur"
//$$ L2 PROP_U32 = "pmu_resume_chgcur"
//$$ L2 PROP_U32 = "pmu_shutdown_chgcur"
//$$ L2 PROP_U32 = "pmu_usbcur_limit"
//$$ L2 PROP_U32 = "pmu_usbcur"
//$$ L2 PROP_U32 = "pmu_usbvol_limit"
//$$ L2 PROP_U32 = "pmu_usbvol"
//$$ L2 PROP_U32 = "pmu_pwroff_vol"
//$$ L2 PROP_U32 = "pmu_pwron_vol"
//$$ L2 PROP_U32 = "pmu_pekoff_time"
//$$ L2 PROP_U32 = "pmu_pekoff_en"
//$$ L2 PROP_U32 = "pmu_peklong_time"
//$$ L2 PROP_U32 = "pmu_pwrok_time"
//$$ L2 PROP_U32 = "pmu_pwrnoe_time"
//$$ L2 PROP_U32 = "pmu_intotp_en"
//$$ L2 PROP_U32 = "pmu_pekon_time"
//$$ L2 PROP_U32 = "pmu_charge_efficiency"
//$$ L2 PROP_U32 16*3 ="pmu_bat_curve"
    battery_parameter:battery_parameter{
        status = "okay";
        pmu_twi_id = <2>;                   /** PMU i2c bus                          */
        pmu_irq_id = <0>;                   /** INT_WATCHDOG                         */
        pmu_twi_addr = <0x32>;              /** PMU i2c addr                         */
        pmu_battery_rdc = <94>;             /** battery internal resistor            */
        pmu_battery_cap = <9250>;           /** battery capacity                     */
        pmu_battery_technology = <4>;       /** POWER_SUPPLY_TECHNOLOGY_LiFe         */
        pmu_battery_name = "PTI PL336078";  /** battery name                         */
        pmu_init_chgvol = <4200000>;        /** target charge voltage                */
        pmu_init_chgend_rate = <10>;        /** set initial charing end current rate */
        pmu_init_chg_enabled = <1>;         /** set initial charing enabled          */
        pmu_init_adc_freq = <25>;           /** set initial adc frequency            */
        pmu_init_adc_freqc = <100>;         /** set initial coulomb adc coufrequency */
        pmu_init_chg_pretime = <80>;        /** set initial pre-charging time        */
        pmu_init_chg_csttime = <300>;       /** set initial rapid-charging time      */
        pmu_init_chgcur = <300000>;         /** set initial charging current limite  */
        pmu_suspend_chgcur = <1300000>;     /** set suspend charging current limite  */
        pmu_resume_chgcur = <300000>;       /** set resume charging current limite   */
        pmu_shutdown_chgcur = <1300000>;    /** set shutdown charging current limite */
        pmu_usbcur_limit = <1>;             /** enable usb current limit?            */
        pmu_usbcur = <500>;                 /** usb limit current value if enabled   */
        pmu_usbvol_limit = <1>;             /** enable usb vbus voltage limit        */
        pmu_usbvol = <4400>;                /** voltage limit value if enabled       */
        pmu_pwroff_vol = <3200>;            /** hardware force power off voltage     */
        pmu_pwron_vol = <2900>;             /** power on when battery voltage above  */
        pmu_pekoff_time = <6000>;           /** long press to power off system       */
        pmu_pekoff_en  = <1>;               /** enable long press to PWR OFF system  */
        pmu_peklong_time = <1500>;          /** threshold to detect long press       */
        pmu_pwrok_time   = <64>;            /** delay to detect pwr ok signal        */
        pmu_pwrnoe_time = <2000>;           /**                                      */
        pmu_intotp_en = <1>;                /** over temperature protection enable   */
        pmu_pekon_time = <128>;             /** powerkey hold time for power on      */
        pmu_charge_efficiency = <99>;       /** efficient of charging                */
        pmu_bat_curve = <
         /* ocv, charge, discharge */
            3132      0       0
            3273      0       0
            3414      0       0
            3555      0       0  
            3625      1       3  
            3660      2       7  
            3696      7      14 
            3731     12      22 
            3766     18      37 
            3801     37      49 
            3836     51      57
            3872     57      63
            3942     69      73
            4012     80      82
            4083     89      90
            4153    100     100>;
	};

    pmu {
        compatible = "amlogic, aml_pmu_prober";                 /* fixed for pmu driver, don't change   */
        #address-cells = <1>;
        #size-cells = <0>;
//$$ DEVICE = "Pmu_axp202"
//$$ L2 PROP_STR = "sub_type"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_U32 = "reg"
//$$ L2 PROP_U32 = "soft_limit_to99"
//$$ L2 PROP_U32 = "ddr_voltage"
//$$ L2 PROP_U32 = "vddao_voltage"
//$$ L2 PROP_CHOICE "battery_parameter_match" = "board_battery"
//$$ L2 PROP_STR = "status"
        axp202 { /* PMU for AXP */
            compatible = "axp_mfd";                             /* for driver probe, must have          */
            sub_type = "axp20_mfd";                             /** sub type of pmu family, must have    */
            i2c_bus = "i2c_bus_ao";                             /** attached i2c bus, must have          */
            reg = <0x34>;                                       /** device i2c address, must have        */
            soft_limit_to99 = <0>;                              /** optional                             */
            ddr_voltage   = <1500000>;                          /** default voltage for DDR, optional    */
            vddao_voltage = <1200000>;                          /** default voltage for AO, optional     */
            board_battery = <&battery_parameter>;               /** battery parameter used, must have    */
            status = "disable";                                 /** status of pmu, only one should be OK */
        };
//$$ DEVICE = "Pmu_aml1212"
//$$ L2 PROP_STR = "sub_type"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_U32 = "reg"
//$$ L2 PROP_U32 = "soft_limit_to99"
//$$ L2 PROP_U32 = "ddr_voltage"
//$$ L2 PROP_U32 = "vddao_voltage"
//$$ L2 PROP_CHOICE "battery_parameter_match" = "board_battery"
//$$ L2 PROP_STR = "status"
        aml1212{                                                /* PMU for AML1212, see comment above   */
            compatible = "aml_pmu";                             /* for driver probe, must have          */
            sub_type = "aml1212";                               /** sub type of pmu family, must have    */
            i2c_bus = "i2c_bus_ao";                             /** attached i2c bus, must have          */
            reg = <0x35>;                                       /** device i2c address, must have        */
            soft_limit_to99 = <0>;                              /** optional                             */
            ddr_voltage   = <1500000>;                          /** default voltage for DDR, optional    */
            vddao_voltage = <1200000>;                          /** default voltage for AO, optional     */
            board_battery = <&battery_parameter>;               /** battery parameter used, must have    */
            status = "disable";                                 /** status of pmu, only one should be OK */
        };
//$$ DEVICE = "Pmu_rn5t618"
//$$ L2 PROP_STR = "sub_type"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_U32 = "reg"
//$$ L2 PROP_U32 = "soft_limit_to99"
//$$ L2 PROP_U32 = "ddr_voltage"
//$$ L2 PROP_U32 = "vddao_voltage"
//$$ L2 PROP_CHOICE "battery_parameter_match" = "board_battery"
//$$ L2 PROP_STR = "status"
        rn5t618{                                                /* PMU for RN5T618, see comment above   */
            compatible = "ricoh_pmu";                           /* for driver probe, must have          */
            sub_type = "rn5t618";                               /** sub type of pmu family, must have    */
            i2c_bus = "i2c_bus_ao";                             /** attached i2c bus, must have          */
            reg = <0x32>;                                       /** device i2c address, must have        */
            soft_limit_to99 = <0>;                              /** optional                             */
            ddr_voltage   = <1500000>;                          /** default voltage for DDR, optional    */
            vddao_voltage = <1200000>;                          /** default voltage for AO, optional     */
            board_battery = <&battery_parameter>;               /** battery parameter used, must have    */
            vbus_dcin_short_connect = <1>;
            status = "okay";                                    /** status of pmu, only one should be OK */
        };
    };

/// ***************************************************************************************
///	-	USB Controller
//$$ MODULE="USB Controller"
    usb_con {
		lm-compatible = "logicmodule-bus";
									
//$$ DEVICE="usb_b"
//$$ L2 PROP_U32 = "lm-periph-id" 
//$$ L2 PROP_STR = "clock-src"
//$$ L2 PROP_U32 = "port-id"
//$$ L2 PROP_U32 = "port-type"
//$$ L2 PROP_U32 = "port-speed"
//$$ L2 PROP_U32 = "port-config"
//$$ L2 PROP_U32 = "port-dma"
//$$ L2 PROP_U32 = "port-id-mode"
//$$ L2 PROP_STR = "status"
        usb_b{
			lm-compatible = "amlogic,usb";
			lm-periph-id = <1>; /** lm name */
			clock-src = "usb1"; /** clock src */
			port-id = <1>;   /** ref to mach/usb.h */
			port-type = <1>;	/** 0: otg, 1: host, 2: slave */
			port-speed = <0>; /** 0: default, 1: high, 2: full */
			port-config = <0>; /** 0: default */
			port-dma = <0>; /** 0: default, 1: single, 2: incr, 3: incr4, 4: incr8, 5: incr16, 6: disable*/
			port-id-mode = <1>; /** 0: hardware, 1: sw_host, 2: sw_slave*/
			status = "okay";
		};

//$$ DEVICE="usb_a"
//$$ L2 PROP_U32 = "lm-periph-id"
//$$ L2 PROP_STR = "clock-src"
//$$ L2 PROP_U32 = "port-id"
//$$ L2 PROP_U32 = "port-type"
//$$ L2 PROP_U32 = "port-speed"
//$$ L2 PROP_U32 = "port-config"
//$$ L2 PROP_U32 = "port-dma"
//$$ L2 PROP_U32 = "port-id-mode"
//$$ L2 PROP_STR = "gpio-vbus-power"
//$$ L2 PROP_U32 = "gpio-work-mask"
//$$ L2 PROP_U32 = "charger_detect"
//$$ L2 PROP_STR = "status"
		usb_a{
			lm-compatible = "amlogic,usb";
			lm-periph-id = <0>; /** lm name */
			clock-src = "usb0"; /** clock src */
			port-id = <0>;  /** ref to mach/usb.h */
			port-type = <0>;	/** 0: otg, 1: host, 2: slave */
			port-speed = <0>; /** 0: default, high, 1: full */
			port-config = <0>; /** 0: default */
			port-dma = <0>; /** 0: default, 1: single, 2: incr, 3: incr4, 4: incr8, 5: incr16, 6: disable*/
			port-id-mode = <0>; /** 0: hardware, 1: sw_host, 2: sw_slave*/
			gpio-vbus-power = "GPIOZ_1";
			gpio-work-mask	= <1>; /**0: work on pulldown,1:work on pullup*/
			charger_detect = <1>;
			status = "okay";
		};
	};

/// ***************************************************************************************
///	-	LCD
//$$ MODULE="LCD"
//$$ DEVICE="backlight"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_CHOICE "Bl_pin_1_match" = "pinctrl-1"
//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
//$$ L2 PROP_U32 2= "bl_level_max_min"
//$$ L2 PROP_U32 = "bl_power_on_delay"
//$$ L2 PROP_U32 = "bl_ctrl_method"
//$$ L2 PROP_STR = "bl_gpio_port"
//$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
//$$ L2 PROP_STR 2 = "bl_pwm_port_gpio_used"
//$$ L2 PROP_U32 = "bl_pwm_freq"
//$$ L2 PROP_U32 2 = "bl_pwm_duty_max_min"
//$$ L2 PROP_U32 = "bl_pwm_combo_high_low_level_switch"
//$$ L2 PROP_STR 2 = "bl_pwm_combo_high_port_method"
//$$ L2 PROP_STR 2 = "bl_pwm_combo_low_port_method"
//$$ L2 PROP_U32 3 = "bl_pwm_combo_high_freq_duty_max_min"
//$$ L2 PROP_U32 3 = "bl_pwm_combo_low_freq_duty_max_min"
	backlight{
		compatible = "amlogic,backlight";
		dev_name = "backlight";
		status = "okay";
		pinctrl-names = "default","pwm_combo";
		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm_default pinmux */
		pinctrl-1 = <&lcd_backlight_combo_pins>;	/** pwm_combo pinmux */
		
		bl_level_default_uboot_kernel=<10 102>;	/** default brightness level for uboot & kernel */
		bl_level_middle_mapping=<128 102>;	/** brightness middle level mapping to a new level*/
		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
		
		/* backlight power ctrl */
		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. 3=pwm_combo. 4=extern. decided by hardware design) */
		
		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
		bl_pwm_freq=<1000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
		bl_pwm_duty_max_min=<100 25>;	/** brightness diminig duty_max, duty_min : (unit: %, positive logic, only for pwm control method) */
		
		/** backlight pwm_combo control: low_duty_max is always active for level_high, and high_duty_min is always active for level_low */
		bl_pwm_combo_high_low_level_switch=<102>;	/** backlight pwm_combo control switch level */
		bl_pwm_combo_high_port_method="PWM_C","1";	/** backlight pwm_combo high port name, pwm control method(1=pwm_negative, 2=pwm_positive) */
		bl_pwm_combo_low_port_method="PWM_D","2";	/** backlight pwm_combo low port name, pwm control method(1=pwm_negative, 2=pwm_positive) */
		bl_pwm_combo_high_freq_duty_max_min=<300000 90 50>;	/** backlight pwm_combo level_high port frequency(unit: Hz), duty_max, duty_min : (unit: %, positive logic) */
		bl_pwm_combo_low_freq_duty_max_min=<10000 100 50>;	/** backlight pwm_combo level_low port frequency(unit: Hz), duty_max, duty_min : (unit: %, positive logic) */
	};

//******************************************************************************
//bl exter
//Notice: only one dev support
//******************************************************************************
//$$ DEVICE = "bl_extern_pmu_aml1218"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR 2 = "gpio_enable"
//$$ L2 PROP_U32 = "type"
//$$ L2 PROP_U32 2 = "dim_max_min"
	bl_extern_pmu_aml1218{
		compatible = "amlogic,bl_pmu_aml1218";
		dev_name ="bl_pmu_aml1218";
		status = "disabled"; /** "disabled" or "okay" */

		gpio_enable = "GPIODV_28"; /** "n" for none */
		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
		dim_max_min = <0x1 0x1b>;
	};

//$$ DEVICE = "bl_extern_i2c_lp8556"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR 2 = "gpio_enable"
//$$ L2 PROP_U32 = "type"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_U32 2 = "dim_max_min"
	bl_extern_i2c_lp8556{
		compatible = "amlogic,bl_i2c_lp8556";
		dev_name ="bl_i2c_lp8556";
		status = "disabled"; /** "disabled" or "okay" */

		gpio_enable = "GPIODV_28"; /** "n" for none */
		type = <0>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
		i2c_address = <0x2c>; /** 7bit i2c address */
		i2c_bus = "i2c_bus_b";
		dim_max_min = <255 10>;
	};

//$$ DEVICE = "bl_extern_mipi_LT070ME05"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR 2 = "gpio_enable"
//$$ L2 PROP_U32 = "type"
//$$ L2 PROP_U32 2 = "dim_max_min"
	bl_extern_mipi_LT070ME05{
		compatible = "amlogic,bl_mipi_LT070ME05";
		dev_name ="bl_mipi_LT070ME056";
		status = "disabled"; /** "disabled" or "okay" */

		gpio_enable = "GPIODV_28"; /** "n" for none */
		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
		dim_max_min = <255 10>;
	};

//******************************************************************************

//$$ DEVICE="lcd"
//$$ L2 PROP_STR = "status"

//$$ L2 PROP_STR = "lcd_model_name"
//$$ L2 PROP_CHOICE "lcd_model_config_match" = "lcd_model_config"
//$$ L2 PROP_U32 = "lcd_bits_user"

//$$ L2 PROP_U32 2 = "ttl_rb_bit_swap"
//$$ L2 PROP_U32 = "lvds_channel_pn_swap"

//$$ L2 PROP_U32 2 = "valid_hvsync_de"
//$$ L3 PROP_U32 4 = "hsign_hoffset_vsign_voffset"

//$$ L3 PROP_U32 2 = "dither_user_ctrl"
//$$ L3 PROP_U32 3 = "vadj_brightness_contrast_saturation"

//$$ L3 PROP_U32 2 = "gamma_en_reverse"
//$$ L4 PROP_U32 4 = "gamma_multi_rgb_coeff"
//$$ L3 PROP_U32 256 = "gamma_table"

//$$ L4 PROP_U32 = "clock_spread_spectrum"
//$$ L4 PROP_U32 = "clock_auto_generation"
//$$ L4 PROP_U32 3 = "clk_pll_div_clk_ctrl"
//$$ L4 PROP_U32 = "lvds_vswing"
//$$ L4 PROP_U32 2 = "lvds_user_repack"
//$$ L4 PROP_U32 3 = "edp_user_link_rate_lane_count"
//$$ L4 PROP_U32 2 = "edp_link_adaptive_vswing"
//$$ L4 PROP_U32 = "edp_sync_clock_mode"
//$$ L4 PROP_U32 2 = "rgb_base_coeff"

//$$ L2 PROP_STR 3 = "power_on_uboot"
//$$ L2 PROP_STR 3 = "power_on_step_1"
//$$ L2 PROP_STR 3 = "power_on_step_2"
//$$ L2 PROP_STR 3 = "power_on_step_3"
//$$ L2 PROP_STR 3 = "power_on_step_4"
//$$ L2 PROP_STR 3 = "power_on_step_5"
//$$ L2 PROP_STR 3 = "power_on_step_6"
//$$ L2 PROP_STR 3 = "power_on_step_7"
//$$ L2 PROP_STR 3 = "power_on_step_8"
//$$ L2 PROP_STR 3 = "power_on_step_9"
//$$ L2 PROP_STR 3 = "power_on_step_10"
//$$ L2 PROP_STR 3 = "power_on_step_11"
//$$ L2 PROP_STR 3 = "power_on_step_12"
//$$ L2 PROP_STR 3 = "power_on_step_13"
//$$ L2 PROP_STR 3 = "power_on_step_14"
//$$ L2 PROP_STR 3 = "power_on_step_15"
//$$ L2 PROP_U32 15 = "power_on_delay"
//$$ L2 PROP_STR 3 = "power_off_step_1"
//$$ L2 PROP_STR 3 = "power_off_step_2"
//$$ L2 PROP_STR 3 = "power_off_step_3"
//$$ L2 PROP_STR 3 = "power_off_step_4"
//$$ L2 PROP_STR 3 = "power_off_step_5"
//$$ L2 PROP_STR 3 = "power_off_step_6"
//$$ L2 PROP_STR 3 = "power_off_step_7"
//$$ L2 PROP_STR 3 = "power_off_step_8"
//$$ L2 PROP_STR 3 = "power_off_step_9"
//$$ L2 PROP_STR 3 = "power_off_step_10"
//$$ L2 PROP_STR 3 = "power_off_step_11"
//$$ L2 PROP_STR 3 = "power_off_step_12"
//$$ L2 PROP_STR 3 = "power_off_step_13"
//$$ L2 PROP_STR 3 = "power_off_step_14"
//$$ L2 PROP_STR 3 = "power_off_step_15"
//$$ L2 PROP_U32 15 = "power_off_delay"
//$$ L2 PROP_STR 3 = "power_off_uboot"
    lcd{
        compatible = "amlogic,lcd";
        dev_name = "lcd";
        status = "okay";
        pinctrl-names = "ttl_6bit_hvsync_de_on","ttl_6bit_hvsync_on","ttl_6bit_de_on","ttl_8bit_hvsync_de_on","ttl_8bit_hvsync_on","ttl_8bit_de_on",
                        "ttl_6bit_hvsync_de_off","ttl_8bit_hvsync_de_off";
        pinctrl-0 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_on>;
        pinctrl-1 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_off>;
        pinctrl-2 = <&lcd_ttl_rgb_6bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_on>;
        pinctrl-3 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_on>;
        pinctrl-4 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_on &lcd_ttl_de_pins_off>;
        pinctrl-5 = <&lcd_ttl_rgb_8bit_pins_on &lcd_ttl_clk_pins_on &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_on>;
        pinctrl-6 = <&lcd_ttl_rgb_6bit_pins_off &lcd_ttl_clk_pins_off &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_off>;
        pinctrl-7 = <&lcd_ttl_rgb_8bit_pins_off &lcd_ttl_clk_pins_off &lcd_ttl_hvsync_pins_off &lcd_ttl_de_pins_off>;

        lcd_model_name ="lcd_B080XAN01";	/** lcd model name for uboot driver */
        lcd_model_config = <&lcd_B080XAN01>;	/** choose panel model config */
        lcd_bits_user=<6>;	/** user defined lcd bits(6 or 8, decided by hardware design; only valid when lcd_bits_option=1) */

        /* below configs are decided by hardware design, you can modify them if needed. */
        ttl_rb_bit_swap=<0 0>;	/** ttl rb_swap, bit_swap : (0=normal, 1=swap) */
        lvds_channel_pn_swap=<0>;	/** lvds channel pn swap(0=normal, 1=swap) */

        /* recommend settings, you can modify them if needed. */
        valid_hvsync_de=<1 1>;	/** hvsync_signal_valid, DE_signal_valid : (0=disable signal, 1=enable signal) */
        hsign_hoffset_vsign_voffset=<0 0 0 0>;	/** hsign, hoffset, vsign, voffset :("sign-offset" is a pair. sign: 0=positive, 1=negative) */

        dither_user_ctrl=<0 0x600>;	/**  dither_user(0=auto setting, 1=user define), dither_ctrl(user defined dither control, only valid when user_define=1) */
        vadj_brightness_contrast_saturation=<0x0 0x80 0x100>;	/** video adjust brightness, contrast, saturation */

        gamma_en_reverse=<1 0>;	/** gamma_en(0=disable gamma table, 1=enable gamma table), gamma_table_reverse(0=normal, 1=reverse) */
        gamma_multi_rgb_coeff=<0 100 100 100>;	/** gamma_multi(0=single gamma, RGB are same, 1=multi gamma, RGB are different), gamma_r_coeff(%), gamma_g_coeff(%), gamma_b_coeff(%) */
        /** if gamma_multi=1, there must be 3 gamma tables, named as gamma_table_r, gamma_table_g, gamma_table_b */
        gamma_table=<0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
                    32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 
                    64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 
                    96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 
                    128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159  
                    160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 
                    192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 
                    224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255>;

        /* default settings, don't modify them unless there is display problem */
        clock_spread_spectrum=<0>;	/** ss_level(M6: 0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%)(M8: 0=disable, 1=0.5%, 2=1%, 3=1.5%, 4=2%) */
        clock_auto_generation=<1>;	/** clk_auto_generation(0=use customer clock parameters, as clk_pll_div_clk_ctrl defined, 1=auto generate clock parameters by lcd_clock) */
        clk_pll_div_clk_ctrl=<0x100042b 0x18833 0x03a82102>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
        lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
        lvds_user_repack=<0 0>;	/** lvds_repack_user(0=auto setting, 1=user define), lvds_repack(0=JEIDA mode data mapping, 1=VESA mode data mapping. only valid when lvds_repack_user=1) */
        edp_user_link_rate_lane_count=<1 1 2>;	/** edp_user(0=auto setting, 1=user define), link_rate(0=1.62G, 1=2.7G, only valid when edp_user=1), lane_count(support 1,2,4, only valid when edp_user=1) */
        edp_link_adaptive_vswing=<0 0>;	/** adaptive(0=fixed user defined vswing, 1=auto setting vswing by training), vswing(support level 0,1,2,3, user defined vswing, only valid when adaptive=0) */
        edp_sync_clock_mode=<1>; /** clocking mode for the user data: (0=asyncronous clock, 1=synchronous clock. default 1) */
        rgb_base_coeff=<0xf0 0x74a>;	/** rgb_base, rgb_coeff */

        //lcd power ctrl	//support up to 15 steps for each sequence
        power_on_uboot="n","n","n";	/** only for uboot, ahead of lcd_power_on, no need config delay */
        power_on_step_1="pmu","GPIO0","0";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_2="cpu","GPIODV_29","0";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_3="cpu","GPIODV_0","0";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_4="cpu","GPIODV_0","1";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_5="signal","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_6="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_7="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_8="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_9="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_10="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_11="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_12="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_on_delay=<20 14 5 70 5 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
        power_off_step_1="signal","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_2="cpu","GPIODV_29","1";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_3="cpu","GPIODV_0","0";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_4="pmu","GPIO0","2";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_5="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_6="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_7="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_8="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_9="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_10="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_11="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_12="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_13="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_14="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_step_15="n","n","n";	/** gpio_type(cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
        power_off_delay=<5 14 0 100 0 0 0 0 0 0 0 0 0 0 0>;	/** power off delay after each step */
        power_off_uboot="n","n","n";	/** only for uboot, at the end of lcd_power_off, no need config delay */
    };

//******************************************************************************
//mipi
//******************************************************************************
//$$ MATCH "lcd_model_config_match" = <&lcd_B080XAN01>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 12 = "dsi_init_on"
//$$ L2 PROP_U32 12 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_B080XAN01:lcd_B080XAN01{ //k101
        model_name="B080XAN01"; /** lcd model name */
        interface="mipi";       /** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<119 159>;  /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 1>;  /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<768 1024>;  /** horizontal resolution, vertical resolution */
        period=<948 1140>;      /** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<64843200 0>; /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<64 120>; /** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<50 80>;  /** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;          /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        dsi_lane_num=<4>; /** mipi dsi data lane number */
        dsi_operation_mode=<1 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_max=<550>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 0>; /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x05 0x11 0 //sleep out
                    0xff 20      //delay 20ms
                    0x05 0x29 0  //display o
                    0xff 20      //delay 20ms
                    0xff 0xff>;  /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0x05 0x28 0 //display off
                    0xff 10       //delay 10ms
                    0x05 0x10 0   //sleep i
                    0xff 10       //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_KD079D1>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 12 = "dsi_init_on"
//$$ L2 PROP_U32 12 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_KD079D1:lcd_KD079D1{ //k102
        model_name="KD079D1";  /** lcd model name */
        interface="mipi";      /** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<119 159>; /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 1>; /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<768 1024>; /** horizontal resolution, vertical resolution */
        period=<948 1140>;     /** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<64843200 0>; /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<64 120>; /** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<50 80>;  /** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;          /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<1 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_min_max=<550>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 0>; /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x05 0x11 0 //sleep out
                    0xff 100     //delay 100ms
                    0x05 0x29 0  //display o
                    0xff 100     //delay 100ms
                    0xff 0xff>;  /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0x05 0x28 0 //display off
                    0xff 10       //delay 10ms
                    0x05 0x10 0   //sleep i
                    0xff 10       //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_CLAA101FP05XG>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 12 = "dsi_init_on"
//$$ L2 PROP_U32 12 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{
        model_name="CLAA101FP05XG";	/** lcd model name */
        interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<216 135>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1920 1200>;	/** horizontal resolution, vertical resolution */
        period=<2080 1235>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<154128000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<32 112>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<6 26>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<1 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_min_max=<1000>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<15>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<1 0>; /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x05 0x11 0 //sleep out
                    0xff 100     //delay 100ms
                    0x05 0x29 0  //display o
                    0xff 100     //delay 100ms
                    0xff 0xff>;  /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0x05 0x28 0 //display off
                    0xff 10       //delay 10ms
                    0x05 0x10 0   //sleep i
                    0xff 10       //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_LD070WX4>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "vsync_horizontal_phase"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 42 = "dsi_init_on"
//$$ L2 PROP_U32 12 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_LD070WX4:lcd_LD070WX4{
        model_name="LD070WX4";	/** lcd model name */
        interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<94 151>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
        period=<864 1315>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<56800000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<4 48>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
        vsync_horizontal_phase=<1 4>; /** adj_sign(0=positive, 1=negative), adj_value. default is <0 0> */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<0 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_min_max=<500>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 0>;  /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x15 0x01 1 0x0 
                    0xff 20     //delay 20ms
                    0x15 0xAE 1 0x0B 
                    0x15 0xEE 1 0xEA 
                    0x15 0xEF 1 0x5F 
                    0x15 0xF2 1 0x68 
                    0x15 0xEE 1 0x0 
                    0x15 0xEF 1 0x0 

                    0x05 0x11 0  //sleep out
                    0xff 200     //delay 200ms
                    0x05 0x29 0  //display o
                    0xff 100     //delay 100ms
                    0xff 0xff>;  /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0x05 0x28 0 //display off
                    0xff 10       //delay 10ms
                    0x05 0x10 0   //sleep i
                    0xff 10       //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;  /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_N070ICN>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "vsync_horizontal_phase"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 2 = "dsi_init_on"
//$$ L2 PROP_U32 2 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_N070ICN:lcd_N070ICN{
        model_name="N070ICN";	/** lcd model name */
        interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<94 151>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
        period=<864 1315>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<56800000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<4 48>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<3 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
        vsync_horizontal_phase=<1 4>; /** adj_sign(0=positive, 1=negative), adj_value. default is <0 0> */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<1 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_min_max=<500>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 0>;  /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0xff 0xff>;  /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0xff 0xff>; /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<1>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HSD101PUW1>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 5 = "dsi_init_on"
//$$ L2 PROP_U32 2 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_HSD101PUW1:lcd_HSD101PUW1{
        model_name="HSD101PUW1"; /** lcd model name */
        interface="mipi";        /** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<216 135>;   /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;   /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1920 1200>;  /** horizontal resolution, vertical resolution */
        period=<1984 1235>;      /** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<147010000 0>; /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<16 48>; /** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;  /** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;         /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<0 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_min_max=<900>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 2>;  /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x32 0x0 0  //turn on peripheral
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0xff 0xff>; /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_LT070ME05>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "dsi_lane_num"
//$$ L2 PROP_U32 2 = "dsi_operation_mode"
//$$ L2 PROP_U32 = "dsi_bit_rate_max"
//$$ L2 PROP_U32 = "pclk_lanebyteclk_factor"
//$$ L2 PROP_U32 2 = "dsi_transfer_ctrl"
//$$ L2 PROP_U32 50 = "dsi_init_on"
//$$ L2 PROP_U32 12 = "dsi_init_off"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_LT070ME05:lcd_LT070ME05{
        model_name="LT070ME05"; /** lcd model name */
        interface="mipi";       /** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<94 151>;   /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;  /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1200 1920>; /** horizontal resolution, vertical resolution */
        period=<1392 1956>;     /** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<136138000 0>; /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<12 72>; /** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 8>;   /** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;         /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        dsi_lane_num=<4>;/** mipi dsi data lane number */
        dsi_operation_mode=<1 0>; /** operation mode when init and display: (0=video mode, 1=command mode). default is <1 0> */
        dsi_bit_rate_max=<900>; /** mipi-dsi data lane bit rate limit(unit: MHz) */
        pclk_lanebyteclk_factor =<0>;   /** special adjust, default is 0 */
        dsi_transfer_ctrl=<0 0>;  /** clk_lane auto stop in LP mode: (0=disable, 1=enable), transfer switch between LP and HS: (0=auto, 1=standard, 2=slow). default is <0 0> */
        dsi_init_on=<0x05 0x01 0  //soft reset
                    0xff 5        //delay 5ms
                    0x23 0xb0 1 0x00  //MCAP
                    0x29 0xb4 1 0x0c  //interface ID setting
                    0x29 0xb6 2 0x3a 0xd3 //DSI control

                    0x15 0x51 1 0xe6 //write display brightness
                    0x15 0x53 1 0x2c //write control display

                    0x15 0x3a 1 0x77 //set pixel format
                    0x05 0x11 0 //sleep out
                    0xff 120    //delay 120ms
                    0x29 0xb3 5 0x14 0x08 0x00 0x22 0x00 //Interface setting
                    0x05 0x29 0 //display o
                    0xff 30     //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        dsi_init_off=<0x05 0x28 0 //display off
                    0xff 10       //delay 10ms
                    0x05 0x10 0   //sleep i
                    0xff 10       //delay 10ms
                    0xff 0xff>;   /** mipi command(data_type, command, para_num, parameters). 0xff,0xff is ending flag. 0xff,n(n<0xff) means delay n(unit: ms) */
        lcd_extern_init=<0>;    /** lcd extern init command control(0=disable, 1=enable) */
    };

//******************************************************************************
//edp
//******************************************************************************
//$$ MATCH "lcd_model_config_match" = <&lcd_LP097QX1>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "max_lane_count"
    lcd_LP097QX1:lcd_LP097QX1{	//k100
        model_name="LP097QX1";	/** lcd model name */
        interface="edp";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<197 147>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<2048 1536>;	/** horizontal resolution, vertical resolution */
        period=<2219 1560>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<207700000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<5 120>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<1 22>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<1 1>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        max_lane_count=<4>; /** max lane count supported */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_LM270WQ1_SDA2>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "max_lane_count"
    lcd_LM270WQ1_SDA2:lcd_LM270WQ1_SDA2{
        model_name="LM270WQ1_SDA2"; /** lcd model name */
        interface="edp";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<597 336>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<2560 1440>;	/** horizontal resolution, vertical resolution */
        period=<2720 1481>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<245500000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<32 112>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<5 38>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<1 1>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        max_lane_count=<4>; /** max lane count supported */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_B140XTN02>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "max_lane_count"
    lcd_B140XTN02:lcd_B140XTN02{
        model_name="B140XTN02"; /** lcd model name */
        interface="edp";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<309 173>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1366 768>;	/** horizontal resolution, vertical resolution */
        period=<1598 798>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<76300000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<5 120>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<1 22>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<1 1>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        max_lane_count=<1>; /** max lane count supported */
    };

//******************************************************************************
//lvds
//******************************************************************************
//$$ MATCH "lcd_model_config_match" = <&lcd_LP097X02>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_LP097X02:lcd_LP097X02{	//g24
        model_name="LP097X02";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<197 147>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1024 768>;	/** horizontal resolution, vertical resolution */
        period=<2084 810>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<85700000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<3 30>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_CLAA070WP03>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_CLAA070WP03:lcd_CLAA070WP03{
        model_name="CLAA070WP03";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<94 151>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
        period=<1000 1320>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<79200000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HE070IA>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HE070IA:lcd_HE070IA{
        model_name="EJ070NA";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<94 151>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
        period=<960 1320>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<76000000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_EJ070NA>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_EJ070NA:lcd_EJ070NA{
        model_name="EJ070NA";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<154 90>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1024 600>;	/** horizontal resolution, vertical resolution */
        period=<1344 635>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<51200000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HJ080IA>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HJ080IA:lcd_HJ080IA{
        model_name="HJ080IA";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<162 122>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1024 768>;	/** horizontal resolution, vertical resolution */
        period=<1344 806>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<65000000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HJ101NA>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HJ101NA:lcd_HJ101NA{
        model_name="HJ101NA";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<217 136>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1280 800>;	/** horizontal resolution, vertical resolution */
        period=<1440 838>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<72400000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_TM081JFH01>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_TM081JFH01:lcd_TM081JFH01{
        model_name="TM081JFH01";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<109 173>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
        period=<960 1320>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<63400000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HSD101PWW1>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HSD101PWW1:lcd_HSD101PWW1{
        model_name="HSD101PWW1";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<217 136>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1280 800>;	/** horizontal resolution, vertical resolution */
        period=<1440 835>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<71100000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<5 120>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 32>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_KD101N4>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"	
    lcd_KD101N4:lcd_KD101N4{
        model_name="KD101N4";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<217 136>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1280 800>;	/** horizontal resolution, vertical resolution */
        period=<1440 838>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<72400000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HM185WX3>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"	
    lcd_HM185WX3:lcd_HM185WX3{
        model_name="HM185WX3";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<410 230>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1368 768>;	/** horizontal resolution, vertical resolution */
        period=<1560 806>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<78000000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_LD070WS2>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
//$$ L2 PROP_U32 = "lcd_extern_init"
    lcd_LD070WS2:lcd_LD070WS2{
        model_name="LD070WS2";	/** lcd model name */
        interface="lvds";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<154 90>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1024 600>;	/** horizontal resolution, vertical resolution */
        period=<1344 635>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<51200000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 170>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 25>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */

        lcd_extern_init=<1>;/** lcd extern init command control(0=disable, 1=enable) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_IVO785H4026172>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_IVO785H4026172:lcd_IVO785H4026172{
        model_name="IVO785H4026172"; /** lcd model name */
        interface="lvds";            /** lcd_interface(mipi, lvds, ttl) */
        active_area=<120 160>;       /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 0>;       /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<768 1024>;    /** horizontal resolution, vertical resolution */
        period=<928 1065>;        /** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<59300000 0>;    /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 80>; /** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 23>;  /** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;    /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };
//******************************************************************************
//ttl
//******************************************************************************
//$$ MATCH "lcd_model_config_match" = <&lcd_CLAP070NJ02>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_CLAP070NJ02:lcd_CLAP070NJ02{	//g33
        model_name="CLAP070NJ02";	/** lcd model name */
        interface="ttl";			/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<154 86>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1024 600>;	/** horizontal resolution, vertical resolution */
        period=<1344 635>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<42700000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 170>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<5 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_TN070TN92>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_TN070TN92:lcd_TN070TN92{	//800*480
        model_name="TN070TN92";	/** lcd model name */
        interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<154 86>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 480>;	/** horizontal resolution, vertical resolution */
        period=<1056 525>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<33300000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 46>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<5 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_KR070PB2S>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_KR070PB2S:lcd_KR070PB2S{
        model_name="KR070PB2S";	/** lcd model name */
        interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<154 86>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 480>;	/** horizontal resolution, vertical resolution */
        period=<1056 525>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<30000000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<20 46>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<5 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HE050NA01F>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HE050NA01F:lcd_HE050NA01F{
        model_name="HE050NA01F";	/** lcd model name */
        interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<108 65>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<800 480>;	/** horizontal resolution, vertical resolution */
        period=<1056 525>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<33300000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 46>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<5 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//$$ MATCH "lcd_model_config_match" = <&lcd_HSD043I9W1>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_HSD043I9W1:lcd_HSD043I9W1{
        model_name="HSD043I9W1";	/** lcd model name */
        interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<95 54>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<8 1>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<480 272>;	/** horizontal resolution, vertical resolution */
        period=<620 310>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<11500000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<5 40>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 8>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//******************************************************************************
//bridge
//******************************************************************************
//$$ MATCH "lcd_model_config_match" = <&lcd_TM080XSZ00>
//$$ L2 PROP_STR = "model_name"
//$$ L2 PROP_STR = "interface"
//$$ L2 PROP_U32 2 = "active_area"
//$$ L2 PROP_U32 2 = "lcd_bits_option"
//$$ L2 PROP_U32 2 = "resolution"
//$$ L2 PROP_U32 2 = "period"
//$$ L2 PROP_U32 2 = "clock_hz_pol"
//$$ L2 PROP_U32 2 = "hsync_width_backporch"
//$$ L2 PROP_U32 2 = "vsync_width_backporch"
//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
    lcd_TM080XSZ00:lcd_TM080XSZ00{//ttl to lvds
        model_name="TM080XSZ00";	/** lcd model name */
        interface="ttl";		/** lcd_interface(mipi, lvds, edp, ttl) */
        active_area=<174 104>;	/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
        lcd_bits_option=<6 0>;	/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */

        resolution=<1280 768>;	/** horizontal resolution, vertical resolution */
        period=<1440 810>;		/** horizontal period(htotal), vertical period(vtotal) */

        clock_hz_pol=<70000000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
        hsync_width_backporch=<10 70>;	/** hsync_width, hsync_backporch(include hsync_width) */
        vsync_width_backporch=<2 20>;	/** vsync_width, vsync_backporch(include vsync_width) */
        pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
    };

//******************************************************************************
//lcd extern 
//Notice: only one dev support
//******************************************************************************
//$$ DEVICE = "lcd_extern_i2c_tc101"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "type"
//$$ L2 PROP_STR = "i2c_bus"
	lcd_extern_i2c_tc101{
		compatible = "amlogic,lcd_i2c_tc101";
		dev_name ="lcd_i2c_tc101";
		status = "disabled";

		type = <0>;	/** lcd_extern_driver type: 0=i2c, 1=spi, 2=mipi */
		i2c_address = <0x7e>; /** i2c address */
		i2c_bus = "i2c_bus_a";
	};

//$$ DEVICE = "lcd_extern_spi_LD070WS2"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "type"
//$$ L2 PROP_U32 = "gpio_spi_cs"
//$$ L2 PROP_U32 = "gpio_spi_clk"
//$$ L2 PROP_U32 = "gpio_spi_data"
	lcd_extern_spi_LD070WS2{
		compatible = "amlogic,lcd_spi_LD070WS2";
		dev_name ="lcd_spi_LD070WS2";
		status = "disabled";

		type = <1>;	/** lcd_extern_driver type: 0=i2c, 1=spi, 2=mipi */
		gpio_spi_cs="GPIODV_1";
		gpio_spi_clk="GPIODV_16";
		gpio_spi_data="GPIODV_17";
	};

//$$ DEVICE = "lcd_extern_mipi_N070ICN"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "type"
	lcd_extern_mipi_N070ICN{
		compatible = "amlogic,lcd_mipi_N070ICN";
		dev_name ="lcd_mipi_N070ICN";
		status = "disabled";

		type = <2>;	/** lcd_extern_driver type: 0=i2c, 1=spi, 2=mipi */
	};


/// ***************************************************************************************
///     -       Sensors
//$$ MODULE="Sensors"

/// ***************************************************************************************
///	-	Audio
//$$ MODULE="Audio"
//$$ DEVICE="audio_platform"
//$$ L2 PROP_STR = "status"
		audio_platform{
			compatible = "amlogic,aml-audio";
			dev_name = "aml-audio.0";
			status = "okay";
		};

//$$ DEVICE="audio_dai"
//$$ L2 PROP_STR = "status"
    audio_dai{
        compatible = "amlogic,aml-dai";
        dev_name = "aml-dai.0";
        status = "okay";
    };

//$$ DEVICE="dummy_codec_audio"
//$$ L2 PROP_STR = "status"	
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L3 PROP_CHOICE "dummy_codec_audio_0_pin_match" = "pinctrl-0"
	dummy_codec_audio{
        status = "okay";
        compatible = "amlogic,aml_dummy_codec_audio";
        dev_name = "aml_dummy_codec_audio.0";
        pinctrl-names = "dummy_codec_audio";
        pinctrl-0 = <&aml_dummy_codec_pins>;
    };
 
//$$ DEVICE="dummy_codec"
//$$ L2 PROP_STR = "status"	 
    dummy_codec{
        status = "okay";
        compatible = "amlogic,aml_dummy_codec";
        dev_name = "dummy_codec.0";
    };


/// ***************************************************************************************
///	-	Camera
//$$ MODULE="Camera"
///	-	aml_cams
//$$ DEVICE = "aml_cams"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR 2 = "pinctrl-names"
//$$ L2 PROP_CHOICE "Camera_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_CHOICE "Camera_pin_1_match" = "pinctrl-1"
	aml_cams{
		compatible = "amlogic,cams_prober";
		status = "okay";
		pinctrl-names = "gpio","csi";
		pinctrl-0 = <&aml_cam_gpio_pins> ;
		pinctrl-1 = <&aml_cam_csi_pins> ;

///	-	gc0308
//$$ DEVICE = "gc0308"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "front_back"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_STR = "gpio_pwdn"
//$$ L2 PROP_STR = "gpio_rst"
//$$ L2 PROP_U32 = "mirror_flip"
//$$ L2 PROP_U32 = "vertical_flip"
//$$ L2 PROP_STR = "bt_path"
		cam_0{
			cam_name = "gc0308";
			front_back = <0>;
			i2c_bus = "i2c_bus_d";
			gpio_pwdn = "GPIOH_6";
			gpio_rst = "GPIOH_4";
			mirror_flip = <1>;
			vertical_flip = <0>;
			bt_path = "gpio";
			status = "okay";
		};	


///	-	gc0328
//$$ DEVICE="gc0328"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "front_back"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_STR = "gpio_pwdn"
//$$ L2 PROP_STR = "gpio_rst"
//$$ L2 PROP_U32 = "mirror_flip"
//$$ L2 PROP_U32 = "vertical_flip"
//$$ L2 PROP_STR = "bt_path"
        cam_2{
			cam_name = "gc0328";
			front_back = <0>;
			i2c_bus = "i2c_bus_d";
			gpio_pwdn = "GPIOH_6";
			gpio_rst = "GPIOH_4";
			mirror_flip = <0>;
			vertical_flip = <0>;	
			bt_path = "gpio";
			status = "okay";
		};

///	-	gc2035
//$$ DEVICE="gc2035"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "front_back"
//$$ L2 PROP_STR = "i2c_bus"
//$$ L2 PROP_STR = "gpio_pwdn"
//$$ L2 PROP_STR = "gpio_rst"
//$$ L2 PROP_U32 = "mirror_flip"
//$$ L2 PROP_U32 = "vertical_flip"
//$$ L2 PROP_STR = "bt_path"
        cam_3{
			cam_name = "gc2035";
			front_back = <0>;
			i2c_bus = "i2c_bus_d";
			gpio_pwdn = "GPIOH_6";
			gpio_rst = "GPIOH_4";
			mirror_flip = <1>;
			vertical_flip = <0>;	
			bt_path = "gpio";
			status = "okay";
		};



	};	

/// ***************************************************************************************
///	-	Input
//$$ MODULE="Input"
//$$ DEVICE="gpio_keypad"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "scan_period"
//$$ L2 PROP_U32 = "key_num"
//$$ L2 PROP_STR = "key_name"
//$$ L2 PROP_U32 = "key_code"
//$$ L2 PROP_STR = "key_pin"
//$$ L2 PROP_U32 = "irq_keyup"
//$$ L2 PROP_U32 = "irq_keydown"
    gpio_keypad{
		compatible = "amlogic,gpio_keypad";
		status = "okay";
		scan_period = <20>;
		key_num = <1>;
        key_name = "power";
		key_code = <116>;
		key_pin = "GPIOAO_3";
        irq_keyup = <6>;
        irq_keydown = <7>;
	};
//$$ DEVICE="saradc"
//$$ L2 PROP_STR = "status"
	saradc{
		compatible = "amlogic,saradc";
		status = "okay";
	};
//$$ DEVICE="adc_keypad"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_STR = "key_name"
//$$ L2 PROP_U32 = "key_num"
//$$ L2 PROP_U32 2 = "key_code"
//$$ L2 PROP_U32 2 = "key_chan"
//$$ L2 PROP_U32 2 = "key_val"
//$$ L2 PROP_U32 2 = "key_tolerance"
    adc_keypad{
		compatible = "amlogic,adc_keypad";
		status = "okay";
		key_name = "vol-","vol+";
		key_num = <2>;
		key_code = <114 115>;
		key_chan = <0 0>;
		key_val = <144 267>;
		key_tolerance = <40 40>;
	};
//$$ DEVICE="meson-remote"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 = "ao_baseaddr"
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "remote_pin_0_match" = "pinctrl-0"
    meson-remote{
		compatible = "amlogic,aml_remote";
		dev_name = "meson-remote";
		status = "ok";
		ao_baseaddr = <0xf3100480>;
		pinctrl-names="default";
		pinctrl-0=<&remote_pins>;
	};

/// ***************************************************************************************
///	-	Spi
//$$ MODULE="Spi"
//$$ DEVICE="spi"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 2 = "reg"
//$$ L2 PROP_STR = "pinctrl-names"
//$$ L2 PROP_CHOICE "Spi_pin_0_match" = "pinctrl-0"
//$$ L2 PROP_U32 = "nr-parts"
//$$ L2 PROP_CHOICE "Spi_nr-part-0_match" = "nr-part-0"
//$$ L2 PROP_CHOICE "Spi_nr-part-1_match" = "nr-part-1"
    spi@cc000000{
		compatible = "amlogic,apollo_spi_nor";
		status = "ok";
		reg = <0xcc000000 0x04000000>;
		pinctrl-names = "default";
		pinctrl-0 = <&aml_spi_nor_pins>;

		nr-parts = <2>;
		nr-part-0 = <&bootloader>;
		nr-part-1 = <&ubootenv>;

//$$ MATCH "Spi_nr-part-0_match" = <&bootloader>
//$$ L2 PROP_STR = "name"
//$$ L2 PROP_U32 = "offset"
//$$ L2 PROP_U32 = "size"
		bootloader:bootloader{
			name = "bootloader";
			offset = <0>;
			size = <0x60000>;
		};

//$$ MATCH "Spi_nr-part-1_match" = <&ubootenv>
//$$ L2 PROP_STR = "name"
//$$ L2 PROP_U32 = "offset"
//$$ L2 PROP_U32 = "size"
		ubootenv:ubootenv{
			name = "ubootenv";
		      offset = <0x100000>;
		      size = <0x10000>;
		};
	};

/// ***************************************************************************************
///	-	Nand
//$$ MODULE="Nand"

/// ***************************************************************************************
///	-	Efuse
//$$ MODULE="Efuse"
//$$ DEVICE="efuse"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_U32 2 = "plat-pos"
//$$ L2 PROP_U32 = "plat-count"
//$$ L2 PROP_U32 = "usid-min"
//$$ L2 PROP_U32 = "usid-max"
    efuse{
		compatible = "amlogic,efuse";
		dev_name = "efuse";
		status = "okay";
		plat-pos = <0 454>;
		plat-count = <58>;
		usid-min = <8>; /*reserved*/
		usid-max = <31>; /*reserved*/
	};

/// ***************************************************************************************
///	-	HDMI
//$$ MODULE="HDMI"
//$$ DEVICE="amhdmitx"
//$$ L2 PROP_STR = "status"
//$$ L2 PROP_CHOICE "HDMI_vend-data_match" = "vend-data"
//$$ L2 PROP_CHOICE "HDMI_pwr-ctrl_match" = "pwr-ctrl"
    amhdmitx{
		compatible = "amlogic,amhdmitx";
		dev_name = "amhdmitx";
		status = "ok";
		vend-data = <&vend_data>;
		pwr-ctrl = <&pwr_ctrl>;
        
//$$ MATCH "HDMI_vend-data_match" = <&vend_data>
//$$ L2 PROP_STR = "vendor_name"
//$$ L2 PROP_U32 = "vendor_id"
//$$ L2 PROP_STR = "product_desc"
//$$ L2 PROP_STR = "cec_osd_string"        
        vend_data: vend_data{
            vendor_name = "Amlogic";           /* Max Chars: 8     */
            vendor_id = <0x000000>;                 /* Refer to http://standards.ieee.org/develop/regauth/oui/oui.txt   */
            product_desc = "M8 MBox SKTv1";        /* Max Chars: 16    */
            cec_osd_string = "Amlogic MBox";        /* Max Chars: 14    */
        };
        
//$$ MATCH "HDMI_pwr-ctrl_match" = <&pwr_ctrl>
//$$ L2 PROP_STR = "pwr_5v_on"
//$$ L2 PROP_STR = "pwr_5v_off"
//$$ L2 PROP_STR = "pwr_3v3_on"
//$$ L2 PROP_STR = "pwr_3v3_off"
//$$ L2 PROP_STR = "pwr_hpll_vdd_on"
//$$ L2 PROP_STR = "pwr_hpll_vdd_off"
        pwr_ctrl: pwr_ctrl{
            pwr_5v_on = "";
            pwr_5v_off = "";
            pwr_3v3_on = "";
            pwr_3v3_off = "";
            pwr_hpll_vdd_on = "";
            pwr_hpll_vdd_off = "";
        };
	};

/// ***************************************************************************************
///	-	Securitykey
//$$ MODULE="Securitykey"
//$$ DEVICE="securitykey"
//$$ L2 PROP_STR = "status"
    securitykey{
		compatible = "amlogic,aml_keys";
		status = "ok";
	};

/// ***************************************************************************************
///	-	Unifykey
//$$ MODULE="Unifykey"

/// ***************************************************************************************
///	-	PowerManager
//$$ MODULE="PowerManager"

/// ***************************************************************************************
///	-	Touch
//$$ MODULE="Touch"

/// **************************************************************************************
/// -   Smartcard
//$$ MODULE="Smartcard"

/// ***************************************************************************************
///	-	Cpufreq
//$$ MODULE="Cpufreq"
//$$ DEVICE="cpufreq-meson"
//$$ L2 PROP_STR = "status"
    cpufreq-meson{
        compatible = "amlogic,cpufreq-meson";
        status = "okay";
    };

/// **************************************************************************************
/// -   GPIO
//$$ MODULE="GPIO"

/// **************************************************************************************
/// -   Pinmux
//$$ MODULE="Pinmux"

}; /* end of / */
